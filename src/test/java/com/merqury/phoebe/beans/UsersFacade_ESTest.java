/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 21 19:00:42 GMT 2018
 */

package com.merqury.phoebe.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.merqury.phoebe.beans.UsersFacade;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.shaded.org.hibernate.QueryException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsersFacade_ESTest extends UsersFacade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
      // Undeclared exception!
      try { 
        usersFacade0.validateLogin("com.merqury.phoebe.entity.Users", "SELECT permissionName FROM PERMISSIONS WHERE idPermission IN ( SELECT DISTINCT(idPermission) FROM Roles_has_Permissions WHERE idRole IN(SELECT DISTINCT(idRole) FROM Users_has_Roles ur JOIN USERS u ON u.idUser=ur.idUser WHERE u.username='");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
      Boolean boolean0 = usersFacade0.hasPermissions("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
      EntityManager entityManager0 = usersFacade0.getEntityManager();
      assertNotNull(entityManager0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      // Undeclared exception!
      try { 
        usersFacade0.validateLogin("Select u frnm Users u where u.username=:name and u.password=:password", "com.merqury.phoebe.entity.UserLoginHistory[ idUserLoginHistory=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.merqury.phoebe.beans.UsersFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
      // Undeclared exception!
      try { 
        usersFacade0.hasPermissions("", "'Bv,&?a$JL$H!9*4H");
        fail("Expecting exception: QueryException");
      
      } catch(QueryException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
      // Undeclared exception!
      try { 
        usersFacade0.hasPermissions("SELECT permissionName FROM PERMISSIONS WHERE idPermission IN ( SELECT DISTINCT(idPermission) FROM Roles_has_Permissions WHERE idRole IN(SELECT DISTINCT(idRole) FROM Users_has_Roles ur JOIN USERS u ON u.idUser=ur.idUser WHERE u.username='", "SELECT permissionName FROM PERMISSIONS WHERE idPermission IN ( SELECT DISTINCT(idPermission) FROM Roles_has_Permissions WHERE idRole IN(SELECT DISTINCT(idRole) FROM Users_has_Roles ur JOIN USERS u ON u.idUser=ur.idUser WHERE u.username='");
        fail("Expecting exception: PersistenceException");
      
      } catch(PersistenceException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      // Undeclared exception!
      try { 
        usersFacade0.hasPermissions("com.merqury.phoebn.entity.UserLoginHistory[ idUserLog0nHistory=", "com.merqury.phoebn.entity.UserLoginHistory[ idUserLog0nHistory=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.merqury.phoebe.beans.UsersFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
      // Undeclared exception!
      try { 
        usersFacade0.hasPermissions((String) null, "{8]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
      // Undeclared exception!
      try { 
        usersFacade0.getDisplayName("C)~tK|$o5&#ewa");
        fail("Expecting exception: NoResultException");
      
      } catch(NoResultException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      // Undeclared exception!
      try { 
        usersFacade0.getDisplayName("$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.merqury.phoebe.beans.UsersFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      usersFacade0.getEntityManager();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
      // Undeclared exception!
      try { 
        usersFacade0.userExist("");
        fail("Expecting exception: NoResultException");
      
      } catch(NoResultException e) {
      }
  }
}
