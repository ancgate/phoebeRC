/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 21 19:01:49 GMT 2018
 */

package com.merqury.phoebe.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.merqury.phoebe.beans.PermissionsFacade;
import com.merqury.phoebe.beans.RolesFacade;
import com.merqury.phoebe.beans.UsersFacade;
import com.merqury.phoebe.entity.Permissions;
import com.merqury.phoebe.entity.Roles;
import com.merqury.phoebe.entity.Users;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFacade_ESTest extends AbstractFacade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PermissionsFacade permissionsFacade0 = new PermissionsFacade();
      Injector.injectEntityManager(permissionsFacade0, (Class<?>) PermissionsFacade.class);
      Injector.validateBean(permissionsFacade0, (Class<?>) PermissionsFacade.class);
      Integer integer0 = new Integer(3);
      Permissions permissions0 = permissionsFacade0.find(integer0);
      assertNull(permissions0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PermissionsFacade permissionsFacade0 = new PermissionsFacade();
      Injector.injectEntityManager(permissionsFacade0, (Class<?>) PermissionsFacade.class);
      Injector.validateBean(permissionsFacade0, (Class<?>) PermissionsFacade.class);
      // Undeclared exception!
      try { 
        permissionsFacade0.find("com.merqury.phoebe.entity.Roles[ idRole=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UsersFacade usersFacade0 = new UsersFacade();
      Injector.injectEntityManager(usersFacade0, (Class<?>) UsersFacade.class);
      Injector.validateBean(usersFacade0, (Class<?>) UsersFacade.class);
      Users users0 = mock(Users.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        usersFacade0.remove(users0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RolesFacade rolesFacade0 = new RolesFacade();
      Injector.injectEntityManager(rolesFacade0, (Class<?>) RolesFacade.class);
      Injector.validateBean(rolesFacade0, (Class<?>) RolesFacade.class);
      Roles roles0 = mock(Roles.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rolesFacade0.create(roles0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PermissionsFacade permissionsFacade0 = new PermissionsFacade();
      Injector.injectEntityManager(permissionsFacade0, (Class<?>) PermissionsFacade.class);
      Injector.validateBean(permissionsFacade0, (Class<?>) PermissionsFacade.class);
      // Undeclared exception!
      try { 
        permissionsFacade0.edit((Permissions) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }
}
