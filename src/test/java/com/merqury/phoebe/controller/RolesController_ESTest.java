/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 26 21:06:24 GMT 2018
 */

package com.merqury.phoebe.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.merqury.phoebe.beans.PermissionsFacade;
import com.merqury.phoebe.beans.RolesFacade;
import com.merqury.phoebe.controller.RolesController;
import com.merqury.phoebe.entity.Permissions;
import com.merqury.phoebe.entity.Roles;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RolesController_ESTest extends RolesController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      LinkedList<Roles> linkedList1 = new LinkedList<Roles>();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
      rolesController0.init();
      Roles roles0 = new Roles();
      roles0.setCreatedBy("com.merqury.phoebe.controller.RolesController");
      Integer integer0 = new Integer((-207));
      roles0.setRoleDescription("");
      roles0.setIdRole(integer0);
      roles0.setRoleName("");
      roles0.toString();
      rolesController0.update(roles0);
      LinkedList<Roles> linkedList2 = new LinkedList<Roles>();
      linkedList2.add(roles0);
      rolesController0.setSelectedRoles(linkedList2);
      rolesController0.getSelectedRoles();
      Integer[] integerArray0 = rolesController0.getSelectedPermissions();
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
      rolesController0.init();
      Roles roles0 = new Roles();
      Integer integer0 = new Integer((-207));
      roles0.setRoleDescription("");
      roles0.setIdRole(integer0);
      roles0.setRoleName("");
      roles0.toString();
      rolesController0.update(roles0);
      LinkedList<Roles> linkedList1 = new LinkedList<Roles>();
      rolesController0.setSelectedRoles(linkedList1);
      rolesController0.getSelectedRoles();
      rolesController0.getSelectedRoles();
      rolesController0.findAll();
      // Undeclared exception!
      try { 
        rolesController0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      LinkedList<Roles> linkedList0 = new LinkedList<Roles>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Roles roles0 = new Roles(integer0);
      Integer integer1 = new Integer(0);
      roles0.setIdRole(integer1);
      assertNull(roles0.getRoleDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
      rolesController0.init();
      Roles roles0 = new Roles();
      Integer integer0 = new Integer((-191));
      roles0.setRoleDescription("");
      roles0.setIdRole(integer0);
      roles0.toString();
      rolesController0.update(roles0);
      rolesController0.getSelectedRoles();
      List<Roles> list0 = rolesController0.getSelectedRoles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacade0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacade0);
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacade0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacade permissionsFacade0 = mock(PermissionsFacade.class, new ViolatedAssumptionAnswer());
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
  }
}
