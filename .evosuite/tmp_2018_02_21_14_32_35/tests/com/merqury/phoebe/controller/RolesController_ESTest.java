/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 21 19:43:30 GMT 2018
 */

package com.merqury.phoebe.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.merqury.phoebe.controller.RolesController;
import com.merqury.phoebe.entity.Permissions;
import com.merqury.phoebe.entity.Roles;
import com.merqury.phoebe.entity.Users;
import com.merqury.phoebe.facade.PermissionsFacadeLocal;
import com.merqury.phoebe.facade.RolesFacadeLocal;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RolesController_ESTest extends RolesController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      Integer integer0 = new Integer(0);
      Permissions permissions0 = new Permissions(integer0);
      linkedList0.add(permissions0);
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
      RolesController rolesController1 = new RolesController();
      List<Permissions> list0 = rolesController0.getPermissions();
      PermissionsFacadeLocal permissionsFacadeLocal1 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(permissionsFacadeLocal1).findAll();
      Injector.inject(rolesController1, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal1);
      RolesFacadeLocal rolesFacadeLocal1 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController1, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal1);
      Injector.validateBean(rolesController1, (Class<?>) RolesController.class);
      Injector.executePostConstruct((Object) rolesController1, (Class<?>) RolesController.class);
      Integer integer1 = new Integer((-27));
      Integer.compare(0, (-3481));
      Roles roles0 = new Roles(integer1, "9)8(;E`Gr", "9)8(;E`Gr", (Date) null, "9)8(;E`Gr", (Date) null, "9)8(;E`Gr");
      roles0.setDateCreated((Date) null);
      rolesController1.setSelectedRole(roles0);
      Roles roles1 = rolesController1.getSelectedRole();
      roles1.setRoleDescription("9)8(;E`Gr");
      rolesController0.delete(roles1);
      Integer[] integerArray0 = new Integer[0];
      rolesController1.setSelectedPermissions(integerArray0);
      rolesController0.getPermissions();
      rolesController1.getSelectedRole();
      rolesController1.setSelectedPermissions(integerArray0);
      rolesController1.getSelectedRoles();
      rolesController1.update();
      Roles roles2 = rolesController1.getRole();
      assertNull(roles2.getRoleName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      LinkedList<Roles> linkedList1 = new LinkedList<Roles>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = Integer.getInteger("'u8}8", integer0);
      Roles roles0 = new Roles(integer1);
      linkedList1.add(roles0);
      Roles roles1 = new Roles(integer0);
      linkedList1.add(roles1);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList1).when(rolesFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
      Integer integer2 = new Integer((-1));
      MockDate mockDate0 = new MockDate((-1), 365, (-934));
      Roles roles2 = new Roles(integer2, "2*1`XpD|2Y-j=Qp", "2*1`XpD|2Y-j=Qp", mockDate0, "", (Date) null, (String) null);
      rolesController0.update(roles2);
      rolesController0.delete((Roles) null);
      rolesController0.delete((Roles) null);
      rolesController0.init();
      rolesController0.getSelectedPermissions();
      rolesController0.findAll();
      Roles roles3 = rolesController0.getSelectedRole();
      assertNull(roles3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
      rolesController0.getSelectedRoles();
      rolesController0.update((Roles) null);
      Roles roles0 = rolesController0.getRole();
      assertNull(roles0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
      List<Roles> list0 = rolesController0.findAll();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Roles roles0 = new Roles();
      roles0.getUsersCollection();
      roles0.setUsersCollection((Collection<Users>) null);
      roles0.setUsersCollection((Collection<Users>) null);
      roles0.toString();
      roles0.setCreatedBy("");
      assertEquals("", roles0.getCreatedBy());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      LinkedList<Permissions> linkedList0 = new LinkedList<Permissions>();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
      rolesController0.getSelectedRole();
      rolesController0.setRole((Roles) null);
      Roles roles0 = new Roles();
      rolesController0.setSelectedRole(roles0);
      Roles roles1 = rolesController0.getSelectedRole();
      rolesController0.delete(roles1);
      rolesController0.update(roles0);
      Integer integer0 = new Integer((-2546));
      Roles roles2 = new Roles(integer0);
      rolesController0.setRole(roles2);
      List<Roles> list0 = rolesController0.getSelectedRoles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RolesController rolesController0 = new RolesController();
      PermissionsFacadeLocal permissionsFacadeLocal0 = mock(PermissionsFacadeLocal.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(permissionsFacadeLocal0).findAll();
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "permissionFacade", (Object) permissionsFacadeLocal0);
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      Injector.inject(rolesController0, (Class<?>) RolesController.class, "roleFacade", (Object) rolesFacadeLocal0);
      Injector.validateBean(rolesController0, (Class<?>) RolesController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) rolesController0, (Class<?>) RolesController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.RolesController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RolesFacadeLocal rolesFacadeLocal0 = mock(RolesFacadeLocal.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("JF7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }
}
