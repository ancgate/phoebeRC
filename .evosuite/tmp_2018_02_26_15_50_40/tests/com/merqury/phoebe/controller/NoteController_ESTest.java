/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 26 21:07:12 GMT 2018
 */

package com.merqury.phoebe.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.merqury.phoebe.beans.NoteFacade;
import com.merqury.phoebe.beans.NoteTypeFacade;
import com.merqury.phoebe.controller.NoteController;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.primefaces.event.SelectEvent;
import org.primefaces.event.UnselectEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NoteController_ESTest extends NoteController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NoteFacade noteFacade0 = mock(NoteFacade.class, new ViolatedAssumptionAnswer());
      NoteTypeFacade noteTypeFacade0 = mock(NoteTypeFacade.class, new ViolatedAssumptionAnswer());
      SelectEvent selectEvent0 = mock(SelectEvent.class, new ViolatedAssumptionAnswer());
      NoteController noteController0 = new NoteController();
      NoteFacade noteFacade1 = mock(NoteFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(noteController0, (Class<?>) NoteController.class, "noteFacadeLocal", (Object) noteFacade1);
      NoteTypeFacade noteTypeFacade1 = mock(NoteTypeFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(noteController0, (Class<?>) NoteController.class, "noteTypeFacadeLocal", (Object) noteTypeFacade1);
      Injector.validateBean(noteController0, (Class<?>) NoteController.class);
      UnselectEvent unselectEvent0 = mock(UnselectEvent.class, new ViolatedAssumptionAnswer());
      doReturn(selectEvent0).when(unselectEvent0).getObject();
      // Undeclared exception!
      try { 
        noteController0.onRowUnselect(unselectEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.primefaces.event.SelectEvent$$EnhancerByMockitoWithCGLIB$$368dddd1 cannot be cast to com.merqury.phoebe.entity.Note
         //
         verifyException("com.merqury.phoebe.controller.NoteController", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NoteController noteController0 = new NoteController();
      NoteFacade noteFacade0 = mock(NoteFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(noteController0, (Class<?>) NoteController.class, "noteFacadeLocal", (Object) noteFacade0);
      NoteTypeFacade noteTypeFacade0 = mock(NoteTypeFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(noteTypeFacade0).findAll();
      Injector.inject(noteController0, (Class<?>) NoteController.class, "noteTypeFacadeLocal", (Object) noteTypeFacade0);
      Injector.validateBean(noteController0, (Class<?>) NoteController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) noteController0, (Class<?>) NoteController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.NoteController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SelectEvent selectEvent0 = mock(SelectEvent.class, new ViolatedAssumptionAnswer());
  }
}
