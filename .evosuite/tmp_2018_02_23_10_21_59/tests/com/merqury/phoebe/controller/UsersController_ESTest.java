/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 23 15:35:24 GMT 2018
 */

package com.merqury.phoebe.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.merqury.phoebe.beans.RolesFacade;
import com.merqury.phoebe.beans.UsersFacade;
import com.merqury.phoebe.controller.UsersController;
import com.merqury.phoebe.entity.Roles;
import com.merqury.phoebe.entity.Users;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.primefaces.event.SelectEvent;
import org.primefaces.event.UnselectEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsersController_ESTest extends UsersController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      Roles roles0 = mock(Roles.class, new ViolatedAssumptionAnswer());
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null, (List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null, (List) null).when(usersFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
      usersController0.getSelectedUser();
      usersController0.delete((Users) null);
      usersController0.init();
      List<Users> list0 = usersController0.getUsernames();
      usersController0.setUsernames(list0);
      usersController0.setSelectedUsers(list0);
      Users users0 = usersController0.getUser();
      usersController0.setUser(users0);
      usersController0.getSelectedRoles();
      usersController0.delete(users0);
      usersController0.getSelectedUsers();
      usersController0.getUserId();
      String string0 = usersController0.update(users0);
      assertEquals("updateUser", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UsersController usersController0 = new UsersController();
      RolesFacade rolesFacade0 = mock(RolesFacade.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(rolesFacade0).findAll();
      Injector.inject(usersController0, (Class<?>) UsersController.class, "rolesFacadeLocal", (Object) rolesFacade0);
      UsersFacade usersFacade0 = mock(UsersFacade.class, new ViolatedAssumptionAnswer());
      Injector.inject(usersController0, (Class<?>) UsersController.class, "userFacadeLocal", (Object) usersFacade0);
      Injector.validateBean(usersController0, (Class<?>) UsersController.class);
      // Undeclared exception!
      try { 
        Injector.executePostConstruct((Object) usersController0, (Class<?>) UsersController.class);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to execute @PostConstructor in com.merqury.phoebe.controller.UsersController
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }
}
